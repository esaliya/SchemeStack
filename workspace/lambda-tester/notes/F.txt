{-# OPTIONS_GHC -fglasgow-exts #-} 

module F where

-------------------------------------------------------------
newtype Void = FoldV { unfoldV :: forall a. a } 

-------------------------------------------------------------
newtype Unit = FoldU { unfoldU :: forall a. a -> a } 

unit :: Unit 
unit = FoldU (\x -> x) 

-------------------------------------------------------------
newtype B = FoldB { unfoldB :: forall a. a -> a -> a } 

showB :: B -> Bool
showB b = unfoldB b True False

true, false :: B 
true = FoldB (\t f -> t)
false = FoldB (\t f -> f) 

notB :: B -> B
notB b = FoldB (\t f -> unfoldB b f t) 

orB, andB :: B -> B -> B
orB b1 b2 = unfoldB b1 true b2
andB b1 b2 = unfoldB b1 b2 false

-------------------------------------------------------------
newtype Pair b c = 
  FoldP { unfoldP :: forall a. (b -> c -> a) -> a } 

showP :: Pair b c -> (b,c)
showP p = unfoldP p (,)

pair :: b -> c -> Pair b c 
pair x y = FoldP (\p -> p x y) 

fstP :: Pair b c -> b 
fstP p = unfoldP p (\x y -> x) 

sndP :: Pair b c -> c
sndP p = unfoldP p (\x y -> y) 

-------------------------------------------------------------
newtype Nat = 
  FoldN { unfoldN :: forall a. a -> (a -> a) -> a } 

showN :: Nat -> Int
showN n = unfoldN n 0 succ

encodeN :: Int -> Nat
encodeN 0 = zero
encodeN n = succN (encodeN (n-1))

zero :: Nat
zero = FoldN (\z s -> z)

one = encodeN 1
two = encodeN 2
three = encodeN 3

succN :: Nat -> Nat
succN n = FoldN (\z s -> s (unfoldN n z s)) 

plus :: Nat -> Nat -> Nat
plus m n = unfoldN m n succN
mult m n = unfoldN n zero (plus m)

isZero :: Nat -> B
isZero m = unfoldN m true (\_ -> false)

-------------------------------------------------------------
newtype L b = 
  FoldL { unfoldL :: forall a. a -> (b -> a -> a) -> a } 

showL :: L b -> [b]
showL xs = unfoldL xs [] (:)

empty :: L b
empty = FoldL (\e c -> e) 

cons :: b -> L b -> L b
cons x xs = FoldL (\e c -> c x (unfoldL xs e c)) 

sumLN :: L Nat -> Nat
sumLN xs = unfoldL xs zero plus

testLN = 
    showN $ 
    sumLN (cons (encodeN 10) 
           (cons (encodeN 11) 
            (cons (encodeN 12) 
             empty)))

-------------------------------------------------------------
-- primitive recursion
--
-- f 0 = z
-- f (succ n) = s n (f n) 
--
-- 

primRecN :: a -> (Nat -> a -> a) -> Nat -> a
primRecN z s n = sndP (unfoldN n 
                       (pair zero z)
                       (\p -> pair 
                                (succN (fstP p))
                                (s (fstP p) (sndP p))))

predN = primRecN zero (\m n -> m) 
                        
factN = primRecN one (\m r -> mult (succN m) r) 

ack m = unfoldN m succN (\f n -> unfoldN (succN n) one f) 

testA0 = showN (ack zero zero)
testA1 = showN (ack one one)
testA2 = showN (ack two two) 
testA3 = showN (ack (encodeN 4) (encodeN 3))

a 0 n = n+1
a (m+1) 0 = a m 1
a (m+1) (n+1) = a m (a (m+1) n)
